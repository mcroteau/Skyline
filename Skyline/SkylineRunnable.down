using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.IO;
using System.Collections;
using System.Threading;
using System.Reflection;

using Skyline;
using Skyline.Model;
using Skyline.Specs;
using Skyline.Implement;
using Skyline.Security;

namespace Skyline{

    public class SkylineRunnable {
        
        String FAVICON = "/favicon.ico";
        String BREAK = "\r\n";
        String SPACE = " ";
        String DOUBLEBREAK = "\r\n\r\n";

        int REQUEST_METHOD = 0;
        int REQUEST_PATH = 1;
        int REQUEST_VERSION = 2;

        int numberOfPartitions = 3;
        int numberOfRequestExecutors = 7;

        int port;
        String sourcesPath;
        String PROPERTIES;

        ViewConfig viewConfig;
        PropertiesConfig propertiesConfig;
        PersistenceConfig persistenceConfig;
        RouteAttributes routeAttributes;
        ApplicationAttributes applicationAttributes;

        ViewCache viewCache;
        FlashMessage flashMessage;
        Dictionary<String, byte[]> viewBytesMap;
        
        ComponentsHolder componentsHolder;
        RouteEndpointHolder routeEndpointHolder;

        NetworkRequest networkRequest;
        NetworkResponse networkResponse;

        Type securityAccessType;

        HttpListener listener;

        String securedAttribute = "attribute";
        String securityElement = "default.security";

        public SkylineRunnable(){
            this.port = 1301;
            this.sourcesPath = "Src";
            this.PROPERTIES = "System.Properties";
            this.viewConfig = new ViewConfig();
            this.viewCache = new ViewCache();
            this.flashMessage = new FlashMessage();
        }

        public SkylineRunnable(int port){
            this.port = port;
            this.sourcesPath = "Src";
            this.PROPERTIES = "System.Properties";
            this.viewConfig = new ViewConfig();
            this.viewCache = new ViewCache();
            this.flashMessage = new FlashMessage();
        }

        public void start(){

            SpecTest specTest = new SpecTest();
            specTest.Run();

            ResourceUtility skylineUtilities = new ResourceUtility();
            
            if (propertiesConfig == null) {
                propertiesConfig = new PropertiesConfig();
                propertiesConfig.setPropertiesFile(PROPERTIES);
            }

            networkRequest = new NetworkRequest();
            networkResponse = new NetworkResponse();

            RouteAttributesResolver routeAttributesResolver = new RouteAttributesResolver();
            routeAttributesResolver.setPropertiesConfig(propertiesConfig);
            routeAttributes = routeAttributesResolver.resolve();
            routeAttributes.setPersistenceConfig(persistenceConfig);

            String resourcesDirectory = viewConfig.getResourcesPath();
            viewBytesMap = skylineUtilities.getViewBytesMap(viewConfig);

            ResourceUtility resourceUtility = new ResourceUtility();

            RouteEndpointResolver routeEndpointResolver = new RouteEndpointResolver(new RouteEndpointHolder());
            routeEndpointResolver.setApplicationAttributes(applicationAttributes);
            routeEndpointHolder = routeEndpointResolver.resolve();

            routeAttributes.setRouteEndpointHolder(routeEndpointHolder);

            ComponentAnnotationResolver componentAnnotationResolver = new ComponentAnnotationResolver(new ComponentsHolder());
            componentAnnotationResolver.setApplicationAttributes(applicationAttributes);
            componentsHolder = componentAnnotationResolver.resolve();

            listener = new HttpListener();
            listener.Prefixes.Add("http://*:" + port.ToString() + "/");

            listener.Start();
            
            Console.WriteLine("Ready!");

            Console.ReadKey();
        }

        public async Task start(){
            Task listenTask = executeNetworkRequest();
            listenTask.GetAwaiter().GetResult();
            return listenTask;
        }


        public async Task executeNetworkRequest(){
            while(true){
    
                HttpListenerContext context = await listener.GetContextAsync();
                HttpListenerRequest request = context.Request;
                HttpListenerResponse response = context.Response;

                // do something with the request
var qry = request.QueryString;
foreach(var key in qry.AllKeys)
    Console.WriteLine("{0} = {1}", key, qry[key]);

                Thread.Sleep(300);
                Stream body = request.InputStream;

                Encoding encoding = request.ContentEncoding;

                Console.WriteLine(request.ContentLength64);

                StreamReader reader = new StreamReader(body, encoding);
                
                String completeRequestPayload = reader.ReadToEnd();
                reader.Close();

                byte[] requestBytes = encoding.GetBytes(completeRequestPayload);    
            
                Console.WriteLine(completeRequestPayload);
                
                ResourceUtility resourceUtility = new ResourceUtility();
                String[] requestBlocks = completeRequestPayload.Split(DOUBLEBREAK, 2);

                String requestHeaderElement = requestBlocks[0];
                String[] methodPathComponentsLookup = requestHeaderElement.Split(BREAK);
                String methodPathComponent = methodPathComponentsLookup[0];

                String[] methodPathVersionComponents = methodPathComponent.Split(SPACE);

                String networkRequestAction = methodPathVersionComponents[REQUEST_METHOD];
                String networkRequestPath = methodPathVersionComponents[REQUEST_PATH];
                String networkRequestVersion = methodPathVersionComponents[REQUEST_VERSION];

                if(networkRequestPath.Equals(FAVICON)){
                    executeNetworkRequest();
                    return;
                }

                RouteAttributes routeAttributesCopy = new RouteAttributes(routeAttributes);
                ApplicationAttributes applicationAttributesCopy = new ApplicationAttributes(applicationAttributes);
                SecurityAttributes securityAttributes = new SecurityAttributes(securityElement, securedAttribute);

                NetworkRequest networkRequest = new NetworkRequest();
                NetworkResponse networkResponse = new NetworkResponse();
                networkRequest.setRequestAction(networkRequestAction);
                networkRequest.setRequestPath(networkRequestPath);
                networkRequest.resolveRequestAttributes();
                networkRequest.setSecurityAttributes(securityAttributes);

                RequestHeaderResolver requestHeaderResolver = new RequestHeaderResolver();
                requestHeaderResolver.setNetworkRequestHeaderElement(requestHeaderElement);
                requestHeaderResolver.setNetworkRequest(networkRequest);
                requestHeaderResolver.resolve();
                
                RequestComponentResolver requestComponentResolver = new RequestComponentResolver();
                requestComponentResolver.setRequestBytes(requestBytes);
                requestComponentResolver.setNetworkRequest(networkRequest);
                requestComponentResolver.resolve();

                RouteEndpointNegotiator routeEndpointNegotiator = new RouteEndpointNegotiator();
                routeEndpointNegotiator.setApplicationAttributes(applicationAttributes);
                routeEndpointNegotiator.setSecurityAttributes(securityAttributes);
                routeEndpointNegotiator.setRouteAttributes(routeAttributes);
                routeEndpointNegotiator.setComponentsHolder(componentsHolder);

                RouteAttributes routeAttributesFinal = routeEndpointNegotiator.getRouteAttributes();
                networkRequest.setRouteAttributes(routeAttributesFinal);
                DataTransferObject dto = new DataTransferObject(persistenceConfig);
                dto.setApplicationAttributes(applicationAttributesCopy);
                SecurityAccess securityAccessInstance = (SecurityAccess) Activator.CreateInstance(securityAccessType, new Object[]{dto});
                SecurityManager securityManager = new SecurityManager(securityAccessInstance, securityAttributes);
                if(securityManager != null) securityManager.setSecurityAttributes(routeEndpointNegotiator.getSecurityAttributes());
                
                SecurityAttributeResolver securityAttributeResolver = new SecurityAttributeResolver();
                securityAttributeResolver.setSecurityAttributes(routeEndpointNegotiator.getSecurityAttributes());
                securityAttributeResolver.resolve(networkRequest, networkResponse);

                StringBuilder sessionValues = new StringBuilder();
                foreach(var securityAttributeEntry in networkResponse.getSecurityAttributes()){
                    SecurityAttribute securityAttribute = securityAttributeEntry.Value;
                    sessionValues.Append(securityAttribute.getName()).Append("=").Append(securityAttribute.getValue());
                }

                RouteResult routeResult = routeEndpointNegotiator.negotiate(viewConfig.getRenderingScheme(), viewConfig.getResourcesPath(), flashMessage, viewCache, viewConfig, networkRequest, networkResponse, securityAttributes, securityManager, viewBytesMap);

                response.OutputStream.Write(encoding.GetBytes((networkRequestVersion + " ")));
                response.OutputStream.Write(encoding.GetBytes(routeResult.getResponseCode()));
                response.OutputStream.Write(encoding.GetBytes(BREAK));

                if(networkRequest.isRedirect()) {
                    response.OutputStream.Write(encoding.GetBytes("Content-Type:text/plain"));
                    response.OutputStream.Write(encoding.GetBytes(BREAK));
                    response.OutputStream.Write(encoding.GetBytes("Set-Cookie:"));
                    response.OutputStream.Write(encoding.GetBytes(sessionValues.ToString()));
                    response.OutputStream.Write(encoding.GetBytes(BREAK));
                    response.OutputStream.Write(encoding.GetBytes(("Location: " +  networkRequest.getRedirectLocation() + SPACE)));
                    response.OutputStream.Write(encoding.GetBytes(BREAK));
                    response.OutputStream.Write(encoding.GetBytes("Content-Length: -1"));
                    response.OutputStream.Write(encoding.GetBytes(DOUBLEBREAK));

                    body.Close();
                    response.Close();
                
                    viewCache = new ViewCache();
                    flashMessage = new FlashMessage();
                    return;
                }


                response.OutputStream.Write(encoding.GetBytes("Content-Type:"));
                response.OutputStream.Write(encoding.GetBytes(routeResult.getContentType()));
                response.OutputStream.Write(encoding.GetBytes(BREAK));

                response.OutputStream.Write(encoding.GetBytes("Set-Cookie:"));
                response.OutputStream.Write(encoding.GetBytes(sessionValues.ToString()));
                response.OutputStream.Write(encoding.GetBytes(DOUBLEBREAK));
                response.OutputStream.Write(routeResult.getResponseOutput());

                // Console.WriteLine("here..");
                // byte[] resp = utf8.GetBytes("HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\nhi");
                // response.OutputStream.Write(resp);
                body.Close();
                response.Close();
            }
        }    

        public void setPersistenceConfig(PersistenceConfig persistenceConfig){
            this.persistenceConfig = persistenceConfig;
        }

        public void setPropertiesConfig(PropertiesConfig propertiesConfig){
            this.propertiesConfig = propertiesConfig;
        }

        public void setViewConfig(ViewConfig viewConfig) {
            this.viewConfig = viewConfig;
        }

        public void setSourcesPath(String sourcesPath){
            this.sourcesPath = sourcesPath;
        }

        public void setSecurityAccessType(Type securityAccessType) {
            this.securityAccessType = securityAccessType;
        }

        public void setNumberOfPartitions(int numberOfPartitions){
            this.numberOfPartitions = numberOfPartitions;
        }

        public void setNumberOfRequestExecutors(int numberOfRequestExecutors){
            this.numberOfRequestExecutors = numberOfRequestExecutors;
        }

        public void setApplicationAttributes(ApplicationAttributes applicationAttributes){
            this.applicationAttributes = applicationAttributes;
        }
    }
}